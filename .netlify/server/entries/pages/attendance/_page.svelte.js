import { c as create_ssr_component, v as validate_component, h as add_attribute, e as escape, f as each } from "../../../chunks/ssr.js";
import { H as Header, S as Sidebar, C as Clock, D as Download, F as Filter, U as Users } from "../../../chunks/Header.js";
import { U as Upload } from "../../../chunks/upload.js";
import { S as Search } from "../../../chunks/search.js";
import { I as Icon } from "../../../chunks/Icon.js";
const Alert_circle = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    [
      "line",
      {
        "x1": "12",
        "x2": "12",
        "y1": "8",
        "y2": "12"
      }
    ],
    [
      "line",
      {
        "x1": "12",
        "x2": "12.01",
        "y1": "16",
        "y2": "16"
      }
    ]
  ];
  return `${validate_component(Icon, "Icon").$$render($$result, Object.assign({}, { name: "alert-circle" }, $$props, { iconNode }), {}, {
    default: () => {
      return `${slots.default ? slots.default({}) : ``}`;
    }
  })}`;
});
const File_text = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const iconNode = [
    [
      "path",
      {
        "d": "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"
      }
    ],
    ["polyline", { "points": "14 2 14 8 20 8" }],
    [
      "line",
      {
        "x1": "16",
        "x2": "8",
        "y1": "13",
        "y2": "13"
      }
    ],
    [
      "line",
      {
        "x1": "16",
        "x2": "8",
        "y1": "17",
        "y2": "17"
      }
    ],
    [
      "line",
      {
        "x1": "10",
        "x2": "8",
        "y1": "9",
        "y2": "9"
      }
    ]
  ];
  return `${validate_component(Icon, "Icon").$$render($$result, Object.assign({}, { name: "file-text" }, $$props, { iconNode }), {}, {
    default: () => {
      return `${slots.default ? slots.default({}) : ``}`;
    }
  })}`;
});
const css = {
  code: ".animate-spin.svelte-1q01t3c{animation:svelte-1q01t3c-spin 1s linear infinite}@keyframes svelte-1q01t3c-spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\r\\n  import { onMount } from 'svelte';\\r\\n  import { \\r\\n    Users, Clock, CalendarCheck, Filter, Download, Search, \\r\\n    Upload, Settings, AlertCircle, FileText, TrendingUp\\r\\n  } from 'lucide-svelte';\\r\\n  import Sidebar from '$lib/components/Sidebar.svelte';\\r\\n  import Header from '$lib/components/Header.svelte';\\r\\n  \\r\\n  // State management\\r\\n  let attendanceData = [];\\r\\n  let filteredData = [];\\r\\n  let loading = false;\\r\\n  let error = null;\\r\\n  let dateRange = {\\r\\n    fromDate: '2025-08-01',\\r\\n    toDate: '2025-08-31'\\r\\n  };\\r\\n  \\r\\n  // Filter states\\r\\n  let filters = {\\r\\n    employeeId: '',\\r\\n    employeeName: '',\\r\\n    department: '',\\r\\n    designation: '',\\r\\n    location: '',\\r\\n    shift: '',\\r\\n    earlyEntry: '',\\r\\n    lateEntry: '',\\r\\n    earlyExit: '',\\r\\n    lateExit: '',\\r\\n    minTotalHours: '',\\r\\n    maxTotalHours: ''\\r\\n  };\\r\\n\\r\\n  let showFilters = false;\\r\\n  let uploadProgress = 0;\\r\\n  let fileInput;\\r\\n\\r\\n  // Sample data updated to match the live site employee data\\r\\n  const sampleAttendanceData = [\\r\\n    {\\r\\n      employeeId: 'NCPL001',\\r\\n      employeeName: 'Mohammed Farooq',\\r\\n      emailId: 'farooq@nationalconsultingindia.com',\\r\\n      reportingTo: '',\\r\\n      department: 'Management',\\r\\n      designation: 'EA - Director',\\r\\n      location: 'Head Office',\\r\\n      role: 'Admin',\\r\\n      date: '08-Sep-2025',\\r\\n      firstIn: '09:07 AM',\\r\\n      lastOut: '07:34 PM',\\r\\n      totalHours: '10:27',\\r\\n      totalHoursDecimal: 10.45,\\r\\n      earlyEntry: '+00:53',\\r\\n      lateEntry: '-',\\r\\n      earlyExit: '-',\\r\\n      lateExit: '+00:34',\\r\\n      netHours: '+01:27',\\r\\n      shiftName: '[10:00 AM - 07:00 PM] Shift C',\\r\\n      status: 'Present'\\r\\n    },\\r\\n    {\\r\\n      employeeId: 'NCPL002',\\r\\n      employeeName: 'Shruthi Nandeesh',\\r\\n      emailId: 'shruthi.d@nationalconsultingindia.com',\\r\\n      reportingTo: 'Mohammed Faisal',\\r\\n      department: 'HR',\\r\\n      designation: 'Asst Manager HR',\\r\\n      location: 'Head Office',\\r\\n      role: 'Manager',\\r\\n      date: '08-Sep-2025',\\r\\n      firstIn: '10:16 AM',\\r\\n      lastOut: '06:47 PM',\\r\\n      totalHours: '08:31',\\r\\n      totalHoursDecimal: 8.52,\\r\\n      earlyEntry: '-',\\r\\n      lateEntry: '-01:16',\\r\\n      earlyExit: '-',\\r\\n      lateExit: '+00:47',\\r\\n      netHours: '-00:29',\\r\\n      shiftName: '[09:00 AM - 06:00 PM] Shift B',\\r\\n      status: 'Present'\\r\\n    },\\r\\n    {\\r\\n      employeeId: 'NCPL010',\\r\\n      employeeName: 'Abhiram C',\\r\\n      emailId: 'abhiram.c@nationalconsultingindia.com',\\r\\n      reportingTo: 'Harshdeep Singh',\\r\\n      department: 'Marketing',\\r\\n      designation: 'Graphic Designer',\\r\\n      location: 'Head Office',\\r\\n      role: 'Team member',\\r\\n      date: '08-Sep-2025',\\r\\n      firstIn: '09:29 AM',\\r\\n      lastOut: '06:38 PM',\\r\\n      totalHours: '09:09',\\r\\n      totalHoursDecimal: 9.15,\\r\\n      earlyEntry: '-',\\r\\n      lateEntry: '-00:29',\\r\\n      earlyExit: '-',\\r\\n      lateExit: '+00:38',\\r\\n      netHours: '+00:09',\\r\\n      shiftName: '[09:00 AM - 06:00 PM] Shift B',\\r\\n      status: 'Present'\\r\\n    },\\r\\n    {\\r\\n      employeeId: 'NCPL007',\\r\\n      employeeName: 'Karthik M K',\\r\\n      emailId: 'karthik.mk@nationalconsultingindia.com',\\r\\n      reportingTo: 'Mohammed Farooq',\\r\\n      department: 'Accounts',\\r\\n      designation: 'CFO',\\r\\n      location: 'Head Office',\\r\\n      role: 'Manager',\\r\\n      date: '08-Sep-2025',\\r\\n      firstIn: '08:45 AM',\\r\\n      lastOut: '05:45 PM',\\r\\n      totalHours: '09:00',\\r\\n      totalHoursDecimal: 9.0,\\r\\n      earlyEntry: '+00:15',\\r\\n      lateEntry: '-',\\r\\n      earlyExit: '-00:15',\\r\\n      lateExit: '-',\\r\\n      netHours: '00:00',\\r\\n      shiftName: '[09:00 AM - 06:00 PM] Shift B',\\r\\n      status: 'Present'\\r\\n    },\\r\\n    {\\r\\n      employeeId: 'NCPL019',\\r\\n      employeeName: 'BP Balasubramanian Pillai',\\r\\n      emailId: 'bala@nationalconsultingindia.com',\\r\\n      reportingTo: 'Mohammed Farooq',\\r\\n      department: 'IT',\\r\\n      designation: 'Manager IT',\\r\\n      location: 'Head Office',\\r\\n      role: 'Manager',\\r\\n      date: '08-Sep-2025',\\r\\n      firstIn: '09:00 AM',\\r\\n      lastOut: '06:00 PM',\\r\\n      totalHours: '09:00',\\r\\n      totalHoursDecimal: 9.0,\\r\\n      earlyEntry: '-',\\r\\n      lateEntry: '-',\\r\\n      earlyExit: '-',\\r\\n      lateExit: '-',\\r\\n      netHours: '00:00',\\r\\n      shiftName: '[09:00 AM - 06:00 PM] Shift B',\\r\\n      status: 'Present'\\r\\n    },\\r\\n    {\\r\\n      employeeId: 'NCPL024',\\r\\n      employeeName: 'Yahya Ayash Luqman',\\r\\n      emailId: 'yahya@nationalconsultingindia.com',\\r\\n      reportingTo: 'Mohammed Farooq',\\r\\n      department: 'Software Development',\\r\\n      designation: 'Software Development Manager',\\r\\n      location: 'Head Office',\\r\\n      role: 'Manager',\\r\\n      date: '08-Sep-2025',\\r\\n      firstIn: '09:15 AM',\\r\\n      lastOut: '06:30 PM',\\r\\n      totalHours: '09:15',\\r\\n      totalHoursDecimal: 9.25,\\r\\n      earlyEntry: '-',\\r\\n      lateEntry: '-00:15',\\r\\n      earlyExit: '-',\\r\\n      lateExit: '+00:30',\\r\\n      netHours: '+00:15',\\r\\n      shiftName: '[09:00 AM - 06:00 PM] Shift B',\\r\\n      status: 'Present'\\r\\n    },\\r\\n    {\\r\\n      employeeId: 'NCPL038',\\r\\n      employeeName: 'Harshdeep Singh',\\r\\n      emailId: 'harshdeep.s@nationalconsultingindia.com',\\r\\n      reportingTo: 'Mohammed Farooq',\\r\\n      department: 'Marketing',\\r\\n      designation: 'Head of Marketing',\\r\\n      location: 'Head Office',\\r\\n      role: 'Manager',\\r\\n      date: '08-Sep-2025',\\r\\n      firstIn: '-',\\r\\n      lastOut: '-',\\r\\n      totalHours: '00:00',\\r\\n      totalHoursDecimal: 0.0,\\r\\n      earlyEntry: '-',\\r\\n      lateEntry: '-',\\r\\n      earlyExit: '-',\\r\\n      lateExit: '-',\\r\\n      netHours: '-09:00',\\r\\n      shiftName: '[09:00 AM - 06:00 PM] Shift B',\\r\\n      status: 'Absent'\\r\\n    },\\r\\n    {\\r\\n      employeeId: 'NCPL028',\\r\\n      employeeName: 'Adityaa Nagarajan',\\r\\n      emailId: 'aadityaa@nationalconsultingindia.com',\\r\\n      reportingTo: 'Yahya Ayash Luqman',\\r\\n      department: 'Software Development',\\r\\n      designation: 'Full Stack Developer',\\r\\n      location: 'Head Office',\\r\\n      role: 'Team member',\\r\\n      date: '08-Sep-2025',\\r\\n      firstIn: '10:30 AM',\\r\\n      lastOut: '07:00 PM',\\r\\n      totalHours: '08:30',\\r\\n      totalHoursDecimal: 8.5,\\r\\n      earlyEntry: '-',\\r\\n      lateEntry: '-01:30',\\r\\n      earlyExit: '-',\\r\\n      lateExit: '+01:00',\\r\\n      netHours: '-00:30',\\r\\n      shiftName: '[09:00 AM - 06:00 PM] Shift B',\\r\\n      status: 'Present'\\r\\n    }\\r\\n  ];\\r\\n\\r\\n  // Initialize with sample data\\r\\n  onMount(() => {\\r\\n    attendanceData = sampleAttendanceData;\\r\\n    filteredData = sampleAttendanceData;\\r\\n  });\\r\\n\\r\\n  // Fetch attendance data from API\\r\\n  async function fetchAttendanceData() {\\r\\n    loading = true;\\r\\n    error = null;\\r\\n    \\r\\n    try {\\r\\n      const params = new URLSearchParams({\\r\\n        fromDate: dateRange.fromDate,\\r\\n        toDate: dateRange.toDate\\r\\n      });\\r\\n      \\r\\n      if (filters.employeeId) {\\r\\n        params.append('employeeId', filters.employeeId);\\r\\n      }\\r\\n\\r\\n      const response = await fetch(\`/api/timetracker?\${params}\`);\\r\\n      const result = await response.json();\\r\\n      \\r\\n      if (result.success) {\\r\\n        attendanceData = result.data || [];\\r\\n        applyFilters();\\r\\n      } else {\\r\\n        error = result.message || 'Failed to fetch attendance data';\\r\\n        // Use sample data on error\\r\\n        attendanceData = sampleAttendanceData;\\r\\n        filteredData = sampleAttendanceData;\\r\\n      }\\r\\n    } catch (err) {\\r\\n      console.error('Error fetching attendance data:', err);\\r\\n      error = 'Failed to connect to server. Using sample data.';\\r\\n      // Use sample data on error\\r\\n      attendanceData = sampleAttendanceData;\\r\\n      filteredData = sampleAttendanceData;\\r\\n    } finally {\\r\\n      loading = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Apply filters to data\\r\\n  function applyFilters() {\\r\\n    let filtered = [...attendanceData];\\r\\n\\r\\n    Object.keys(filters).forEach(key => {\\r\\n      const value = filters[key];\\r\\n      if (!value) return;\\r\\n\\r\\n      switch (key) {\\r\\n        case 'employeeId':\\r\\n          filtered = filtered.filter(item => \\r\\n            item.employeeId.toLowerCase().includes(value.toLowerCase())\\r\\n          );\\r\\n          break;\\r\\n        case 'employeeName':\\r\\n          filtered = filtered.filter(item => \\r\\n            item.employeeName.toLowerCase().includes(value.toLowerCase())\\r\\n          );\\r\\n          break;\\r\\n        case 'department':\\r\\n          filtered = filtered.filter(item => \\r\\n            item.department.toLowerCase().includes(value.toLowerCase())\\r\\n          );\\r\\n          break;\\r\\n        case 'designation':\\r\\n          filtered = filtered.filter(item => \\r\\n            item.designation.toLowerCase().includes(value.toLowerCase())\\r\\n          );\\r\\n          break;\\r\\n        case 'location':\\r\\n          filtered = filtered.filter(item => \\r\\n            item.location.toLowerCase().includes(value.toLowerCase())\\r\\n          );\\r\\n          break;\\r\\n        case 'shift':\\r\\n          filtered = filtered.filter(item => \\r\\n            item.shiftName.toLowerCase().includes(value.toLowerCase())\\r\\n          );\\r\\n          break;\\r\\n        case 'minTotalHours':\\r\\n          filtered = filtered.filter(item => \\r\\n            item.totalHoursDecimal >= parseFloat(value)\\r\\n          );\\r\\n          break;\\r\\n        case 'maxTotalHours':\\r\\n          filtered = filtered.filter(item => \\r\\n            item.totalHoursDecimal <= parseFloat(value)\\r\\n          );\\r\\n          break;\\r\\n      }\\r\\n    });\\r\\n\\r\\n    filteredData = filtered;\\r\\n  }\\r\\n\\r\\n  // Reactive statements for applying filters\\r\\n  $: if (filters) {\\r\\n    applyFilters();\\r\\n  }\\r\\n\\r\\n  // Group data by department for better organization\\r\\n  $: groupedData = (() => {\\r\\n    const groups = {};\\r\\n    filteredData.forEach(record => {\\r\\n      if (!groups[record.department]) {\\r\\n        groups[record.department] = [];\\r\\n      }\\r\\n      groups[record.department].push(record);\\r\\n    });\\r\\n    return groups;\\r\\n  })();\\r\\n\\r\\n  $: departmentStats = (() => {\\r\\n    const stats = {};\\r\\n    Object.keys(groupedData).forEach(dept => {\\r\\n      const deptData = groupedData[dept];\\r\\n      const present = deptData.filter(r => r.status === 'Present').length;\\r\\n      const absent = deptData.filter(r => r.status === 'Absent').length;\\r\\n      const avgHours = deptData.length > 0 \\r\\n        ? (deptData.reduce((sum, r) => sum + r.totalHoursDecimal, 0) / deptData.length).toFixed(1)\\r\\n        : 0;\\r\\n      \\r\\n      stats[dept] = {\\r\\n        total: deptData.length,\\r\\n        present,\\r\\n        absent,\\r\\n        avgHours\\r\\n      };\\r\\n    });\\r\\n    return stats;\\r\\n  })();\\r\\n\\r\\n  // Statistics calculations\\r\\n  $: statistics = (() => {\\r\\n    const totalEmployees = new Set(filteredData.map(item => item.employeeId)).size;\\r\\n    const totalRecords = filteredData.length;\\r\\n    const avgHours = filteredData.length > 0 \\r\\n      ? (filteredData.reduce((sum, item) => sum + item.totalHoursDecimal, 0) / filteredData.length).toFixed(2)\\r\\n      : 0;\\r\\n    \\r\\n    const earlyEntries = filteredData.filter(item => item.earlyEntry && item.earlyEntry.startsWith('+')).length;\\r\\n    const lateEntries = filteredData.filter(item => item.lateEntry && item.lateEntry.startsWith('-')).length;\\r\\n    const earlyExits = filteredData.filter(item => item.earlyExit && item.earlyExit.startsWith('-')).length;\\r\\n    const lateExits = filteredData.filter(item => item.lateExit && item.lateExit.startsWith('+')).length;\\r\\n\\r\\n    return {\\r\\n      totalEmployees,\\r\\n      totalRecords,\\r\\n      avgHours,\\r\\n      earlyEntries,\\r\\n      lateEntries,\\r\\n      earlyExits,\\r\\n      lateExits\\r\\n    };\\r\\n  })();\\r\\n\\r\\n  // Handle file upload\\r\\n  async function handleFileUpload(event) {\\r\\n    const file = event.target.files[0];\\r\\n    if (!file) return;\\r\\n\\r\\n    if (!file.name.endsWith('.csv') && !file.name.endsWith('.xlsx')) {\\r\\n      alert('Please upload a CSV or Excel file');\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uploadProgress = 0;\\r\\n\\r\\n    try {\\r\\n      const formData = new FormData();\\r\\n      formData.append('file', file);\\r\\n\\r\\n      // Simulate upload progress\\r\\n      const progressInterval = setInterval(() => {\\r\\n        uploadProgress = Math.min(uploadProgress + 10, 90);\\r\\n      }, 200);\\r\\n\\r\\n      const response = await fetch('/api/attendance/upload', {\\r\\n        method: 'POST',\\r\\n        body: formData\\r\\n      });\\r\\n\\r\\n      clearInterval(progressInterval);\\r\\n      uploadProgress = 100;\\r\\n\\r\\n      const result = await response.json();\\r\\n      \\r\\n      if (result.success) {\\r\\n        alert('File uploaded successfully!');\\r\\n        await fetchAttendanceData(); // Refresh data\\r\\n      } else {\\r\\n        alert('Upload failed: ' + result.message);\\r\\n      }\\r\\n    } catch (error) {\\r\\n      alert('Upload failed: ' + error.message);\\r\\n    } finally {\\r\\n      uploadProgress = 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Export to CSV\\r\\n  function exportToCSV() {\\r\\n    const headers = [\\r\\n      'Employee ID', 'Employee Name', 'Email ID', 'Reporting To', 'Department',\\r\\n      'Designation', 'Location', 'Role', 'Date', 'First In', 'Last Out',\\r\\n      'Total Hours', 'Early Entry', 'Late Entry', 'Early Exit', 'Late Exit',\\r\\n      'Net Hours', 'Shift Name'\\r\\n    ];\\r\\n\\r\\n    const csvContent = [\\r\\n      headers.join(','),\\r\\n      ...filteredData.map(row => [\\r\\n        row.employeeId, row.employeeName, row.emailId, row.reportingTo,\\r\\n        row.department, row.designation, row.location, row.role, row.date,\\r\\n        row.firstIn, row.lastOut, row.totalHours, row.earlyEntry, row.lateEntry,\\r\\n        row.earlyExit, row.lateExit, row.netHours, row.shiftName\\r\\n      ].map(field => \`\\"\${field}\\"\`).join(','))\\r\\n    ].join('\\\\n');\\r\\n\\r\\n    const blob = new Blob([csvContent], { type: 'text/csv' });\\r\\n    const url = window.URL.createObjectURL(blob);\\r\\n    const a = document.createElement('a');\\r\\n    a.href = url;\\r\\n    a.download = \`attendance_report_\${dateRange.fromDate}_to_\${dateRange.toDate}.csv\`;\\r\\n    a.click();\\r\\n    window.URL.revokeObjectURL(url);\\r\\n  }\\r\\n\\r\\n  // Clear all filters\\r\\n  function clearFilters() {\\r\\n    filters = {\\r\\n      employeeId: '',\\r\\n      employeeName: '',\\r\\n      department: '',\\r\\n      designation: '',\\r\\n      location: '',\\r\\n      shift: '',\\r\\n      earlyEntry: '',\\r\\n      lateEntry: '',\\r\\n      earlyExit: '',\\r\\n      lateExit: '',\\r\\n      minTotalHours: '',\\r\\n      maxTotalHours: ''\\r\\n    };\\r\\n  }\\r\\n<\/script>\\r\\n\\r\\n<svelte:head>\\r\\n  <title>Attendance Dashboard - National Consulting India</title>\\r\\n  <meta name=\\"description\\" content=\\"Track and analyze employee attendance patterns\\" />\\r\\n</svelte:head>\\r\\n\\r\\n<div class=\\"min-h-screen bg-gradient-to-br from-offwhite-50 via-gold-50 to-offwhite-100 text-zinc-800\\">\\r\\n  <!-- Header -->\\r\\n  <Header />\\r\\n\\r\\n  <!-- Layout -->\\r\\n  <div class=\\"mx-auto grid max-w-7xl grid-cols-1 gap-6 p-6 lg:grid-cols-12\\">\\r\\n    <!-- Sidebar -->\\r\\n    <aside class=\\"lg:col-span-2\\">\\r\\n      <Sidebar currentPath=\\"/attendance\\" />\\r\\n    </aside>\\r\\n\\r\\n    <!-- Main Content -->\\r\\n    <main class=\\"lg:col-span-10 space-y-6\\">\\r\\n      <!-- Page Title -->\\r\\n      <div class=\\"card\\">\\r\\n        <div class=\\"card-header\\">\\r\\n          <div class=\\"flex items-center justify-between\\">\\r\\n            <div class=\\"flex items-center gap-3\\">\\r\\n              <Clock class=\\"h-6 w-6 text-gold-600\\" />\\r\\n              <div>\\r\\n                <h1 class=\\"text-2xl font-bold text-zinc-900\\">Attendance</h1>\\r\\n                <p class=\\"text-sm text-zinc-600\\">Employee attendance tracking and management</p>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\"flex items-center gap-3\\">\\r\\n              <button\\r\\n                on:click={exportToCSV}\\r\\n                class=\\"btn-secondary flex items-center gap-2\\"\\r\\n              >\\r\\n                <Download class=\\"h-4 w-4\\" />\\r\\n                Export\\r\\n              </button>\\r\\n              <a\\r\\n                href=\\"/settings\\"\\r\\n                class=\\"btn-secondary flex items-center gap-2\\"\\r\\n              >\\r\\n                <Upload class=\\"h-4 w-4\\" />\\r\\n                Upload Data\\r\\n              </a>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Controls Section -->\\r\\n      <div class=\\"card\\">\\r\\n        <div class=\\"card-content\\">\\r\\n          <div class=\\"grid grid-cols-1 lg:grid-cols-4 gap-6\\">\\r\\n            <!-- Date Range -->\\r\\n            <div>\\r\\n              <label class=\\"block text-sm font-medium text-zinc-700 mb-2\\">From Date</label>\\r\\n              <input\\r\\n                type=\\"date\\"\\r\\n                bind:value={dateRange.fromDate}\\r\\n                class=\\"input w-full\\"\\r\\n              />\\r\\n            </div>\\r\\n            <div>\\r\\n              <label class=\\"block text-sm font-medium text-zinc-700 mb-2\\">To Date</label>\\r\\n              <input\\r\\n                type=\\"date\\"\\r\\n                bind:value={dateRange.toDate}\\r\\n                class=\\"input w-full\\"\\r\\n              />\\r\\n            </div>\\r\\n\\r\\n            <!-- Actions -->\\r\\n            <div class=\\"flex flex-col gap-2\\">\\r\\n              <button\\r\\n                on:click={fetchAttendanceData}\\r\\n                disabled={loading}\\r\\n                class=\\"btn-primary flex items-center gap-2 justify-center disabled:opacity-50\\"\\r\\n              >\\r\\n                {#if loading}\\r\\n                  <div class=\\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\\"></div>\\r\\n                  Loading...\\r\\n                {:else}\\r\\n                  <Search class=\\"h-4 w-4\\" />\\r\\n                  Fetch Data\\r\\n                {/if}\\r\\n              </button>\\r\\n              <button\\r\\n                on:click={() => showFilters = !showFilters}\\r\\n                class=\\"btn-secondary flex items-center gap-2 justify-center\\"\\r\\n              >\\r\\n                <Filter class=\\"h-4 w-4\\" />\\r\\n                Filters\\r\\n              </button>\\r\\n            </div>\\r\\n\\r\\n            <!-- File Upload -->\\r\\n            <div>\\r\\n              <label class=\\"block text-sm font-medium text-zinc-700 mb-2\\">Upload Excel</label>\\r\\n              <input\\r\\n                type=\\"file\\"\\r\\n                accept=\\".csv,.xlsx\\"\\r\\n                on:change={handleFileUpload}\\r\\n                bind:this={fileInput}\\r\\n                class=\\"input w-full\\"\\r\\n              />\\r\\n              {#if uploadProgress > 0}\\r\\n                <div class=\\"mt-2 bg-gold-200 rounded-full h-2\\">\\r\\n                  <div \\r\\n                    class=\\"bg-gold-500 h-2 rounded-full transition-all duration-300\\"\\r\\n                    style=\\"width: {uploadProgress}%\\"\\r\\n                  ></div>\\r\\n                </div>\\r\\n              {/if}\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <!-- Advanced Filters -->\\r\\n          {#if showFilters}\\r\\n            <div class=\\"mt-6 p-4 bg-gold-50/50 rounded-lg border border-gold-200/50\\">\\r\\n              <div class=\\"flex justify-between items-center mb-4\\">\\r\\n                <h3 class=\\"text-lg font-semibold text-zinc-900\\">Advanced Filters</h3>\\r\\n                <button\\r\\n                  on:click={clearFilters}\\r\\n                  class=\\"text-red-600 hover:text-red-800 text-sm font-medium\\"\\r\\n                >\\r\\n                  Clear All\\r\\n                </button>\\r\\n              </div>\\r\\n              <div class=\\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\\">\\r\\n                <input\\r\\n                  type=\\"text\\"\\r\\n                  placeholder=\\"Employee ID\\"\\r\\n                  bind:value={filters.employeeId}\\r\\n                  class=\\"input\\"\\r\\n                />\\r\\n                <input\\r\\n                  type=\\"text\\"\\r\\n                  placeholder=\\"Employee Name\\"\\r\\n                  bind:value={filters.employeeName}\\r\\n                  class=\\"input\\"\\r\\n                />\\r\\n                <input\\r\\n                  type=\\"text\\"\\r\\n                  placeholder=\\"Department\\"\\r\\n                  bind:value={filters.department}\\r\\n                  class=\\"input\\"\\r\\n                />\\r\\n                <input\\r\\n                  type=\\"text\\"\\r\\n                  placeholder=\\"Designation\\"\\r\\n                  bind:value={filters.designation}\\r\\n                  class=\\"input\\"\\r\\n                />\\r\\n                <input\\r\\n                  type=\\"text\\"\\r\\n                  placeholder=\\"Location\\"\\r\\n                  bind:value={filters.location}\\r\\n                  class=\\"input\\"\\r\\n                />\\r\\n                <input\\r\\n                  type=\\"text\\"\\r\\n                  placeholder=\\"Shift\\"\\r\\n                  bind:value={filters.shift}\\r\\n                  class=\\"input\\"\\r\\n                />\\r\\n                <input\\r\\n                  type=\\"number\\"\\r\\n                  placeholder=\\"Min Hours\\"\\r\\n                  bind:value={filters.minTotalHours}\\r\\n                  class=\\"input\\"\\r\\n                />\\r\\n                <input\\r\\n                  type=\\"number\\"\\r\\n                  placeholder=\\"Max Hours\\"\\r\\n                  bind:value={filters.maxTotalHours}\\r\\n                  class=\\"input\\"\\r\\n                />\\r\\n              </div>\\r\\n            </div>\\r\\n          {/if}\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Statistics Cards -->\\r\\n      <div class=\\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\\">\\r\\n        <div class=\\"card\\">\\r\\n          <div class=\\"card-content\\">\\r\\n            <div class=\\"flex items-center justify-between\\">\\r\\n              <div>\\r\\n                <p class=\\"text-sm font-medium text-zinc-600\\">Total Employees</p>\\r\\n                <p class=\\"text-3xl font-bold text-zinc-900\\">{statistics.totalEmployees}</p>\\r\\n              </div>\\r\\n              <Users class=\\"h-8 w-8 text-gold-500\\" />\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        \\r\\n        <div class=\\"card\\">\\r\\n          <div class=\\"card-content\\">\\r\\n            <div class=\\"flex items-center justify-between\\">\\r\\n              <div>\\r\\n                <p class=\\"text-sm font-medium text-zinc-600\\">Total Records</p>\\r\\n                <p class=\\"text-3xl font-bold text-zinc-900\\">{statistics.totalRecords}</p>\\r\\n              </div>\\r\\n              <FileText class=\\"h-8 w-8 text-emerald-500\\" />\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\"card\\">\\r\\n          <div class=\\"card-content\\">\\r\\n            <div class=\\"flex items-center justify-between\\">\\r\\n              <div>\\r\\n                <p class=\\"text-sm font-medium text-zinc-600\\">Average Hours</p>\\r\\n                <p class=\\"text-3xl font-bold text-zinc-900\\">{statistics.avgHours}</p>\\r\\n              </div>\\r\\n              <Clock class=\\"h-8 w-8 text-blue-500\\" />\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\"card\\">\\r\\n          <div class=\\"card-content\\">\\r\\n            <div class=\\"flex items-center justify-between\\">\\r\\n              <div>\\r\\n                <p class=\\"text-sm font-medium text-zinc-600\\">Late Entries</p>\\r\\n                <p class=\\"text-3xl font-bold text-red-600\\">{statistics.lateEntries}</p>\\r\\n              </div>\\r\\n              <AlertCircle class=\\"h-8 w-8 text-red-500\\" />\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Error Message -->\\r\\n      {#if error}\\r\\n        <div class=\\"bg-red-50 border border-red-200 rounded-lg p-4\\">\\r\\n          <div class=\\"flex items-center gap-2\\">\\r\\n            <AlertCircle class=\\"h-5 w-5 text-red-500\\" />\\r\\n            <p class=\\"text-red-700\\">{error}</p>\\r\\n          </div>\\r\\n        </div>\\r\\n      {/if}\\r\\n\\r\\n      <!-- Data Table with Department Grouping -->\\r\\n      <div class=\\"card overflow-hidden\\">\\r\\n        <div class=\\"card-header flex justify-between items-center\\">\\r\\n          <h2 class=\\"text-xl font-semibold text-zinc-900\\">Today's Attendance Records</h2>\\r\\n          <div class=\\"text-sm text-zinc-600\\">\\r\\n            Showing {filteredData.length} of {attendanceData.length} employees\\r\\n          </div>\\r\\n        </div>\\r\\n        \\r\\n        <div class=\\"card-content p-0\\">\\r\\n          {#each Object.keys(groupedData) as department}\\r\\n            <!-- Department Header -->\\r\\n            <div class=\\"bg-gold-50/50 px-6 py-3 border-b border-gold-200/50\\">\\r\\n              <div class=\\"flex items-center justify-between\\">\\r\\n                <h3 class=\\"text-lg font-semibold text-zinc-900\\">{department}</h3>\\r\\n                <div class=\\"text-sm text-zinc-600\\">\\r\\n                  Total: <span class=\\"font-medium\\">{departmentStats[department].total}</span>\\r\\n                  Present: <span class=\\"font-medium text-emerald-600\\">{departmentStats[department].present}</span>\\r\\n                  {#if departmentStats[department].absent > 0}\\r\\n                    Absent: <span class=\\"font-medium text-red-600\\">{departmentStats[department].absent}</span>\\r\\n                  {/if}\\r\\n                  Avg Hours: <span class=\\"font-medium\\">{departmentStats[department].avgHours}</span>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <!-- Department Table -->\\r\\n            <div class=\\"overflow-x-auto\\">\\r\\n              <table class=\\"min-w-full\\">\\r\\n                <thead class=\\"bg-zinc-50\\">\\r\\n                  <tr>\\r\\n                    <th class=\\"px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider\\">Employee</th>\\r\\n                    <th class=\\"px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider\\">Status</th>\\r\\n                    <th class=\\"px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider\\">First In</th>\\r\\n                    <th class=\\"px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider\\">Last Out</th>\\r\\n                    <th class=\\"px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider\\">Total Hours</th>\\r\\n                    <th class=\\"px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider\\">Late Entry</th>\\r\\n                    <th class=\\"px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider\\">Early Exit</th>\\r\\n                    <th class=\\"px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider\\">Net Hours</th>\\r\\n                    <th class=\\"px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider\\">Shift</th>\\r\\n                  </tr>\\r\\n                </thead>\\r\\n                <tbody class=\\"bg-white divide-y divide-zinc-200\\">\\r\\n                  {#each groupedData[department] as record}\\r\\n                    <tr class=\\"hover:bg-gold-50/30 transition-colors\\">\\r\\n                      <td class=\\"px-6 py-4 whitespace-nowrap\\">\\r\\n                        <div class=\\"flex items-center\\">\\r\\n                          <div class=\\"h-8 w-8 rounded-full bg-gold-100 flex items-center justify-center text-sm font-medium text-gold-800 mr-3\\">\\r\\n                            {record.employeeName.split(' ').map(n => n[0]).join('').slice(0, 2)}\\r\\n                          </div>\\r\\n                          <div>\\r\\n                            <div class=\\"text-sm font-medium text-zinc-900\\">{record.employeeName}</div>\\r\\n                            <div class=\\"text-sm text-zinc-500\\">{record.employeeId} • {record.designation}</div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </td>\\r\\n                      <td class=\\"px-6 py-4 whitespace-nowrap\\">\\r\\n                        <span class=\\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {record.status === 'Present' ? 'bg-emerald-100 text-emerald-800' : 'bg-red-100 text-red-800'}\\">\\r\\n                          {record.status}\\r\\n                        </span>\\r\\n                      </td>\\r\\n                      <td class=\\"px-6 py-4 whitespace-nowrap text-sm text-zinc-900\\">\\r\\n                        {record.firstIn}\\r\\n                      </td>\\r\\n                      <td class=\\"px-6 py-4 whitespace-nowrap text-sm text-zinc-900\\">\\r\\n                        {record.lastOut}\\r\\n                      </td>\\r\\n                      <td class=\\"px-6 py-4 whitespace-nowrap text-sm font-medium text-zinc-900\\">\\r\\n                        {record.totalHours}\\r\\n                      </td>\\r\\n                      <td class=\\"px-6 py-4 whitespace-nowrap\\">\\r\\n                        <span class=\\"text-sm {record.lateEntry.startsWith('-') ? 'text-red-600 font-medium' : 'text-zinc-500'}\\">\\r\\n                          {record.lateEntry === '-' ? 'On Time' : record.lateEntry}\\r\\n                        </span>\\r\\n                      </td>\\r\\n                      <td class=\\"px-6 py-4 whitespace-nowrap\\">\\r\\n                        <span class=\\"text-sm {record.earlyExit.startsWith('-') ? 'text-red-600 font-medium' : 'text-zinc-500'}\\">\\r\\n                          {record.earlyExit === '-' ? 'On Time' : record.earlyExit}\\r\\n                        </span>\\r\\n                      </td>\\r\\n                      <td class=\\"px-6 py-4 whitespace-nowrap\\">\\r\\n                        <span class=\\"text-sm font-medium {record.netHours.startsWith('+') ? 'text-emerald-600' : record.netHours.startsWith('-') ? 'text-red-600' : 'text-zinc-500'}\\">\\r\\n                          {record.netHours}\\r\\n                        </span>\\r\\n                      </td>\\r\\n                      <td class=\\"px-6 py-4 whitespace-nowrap text-sm text-zinc-500\\">\\r\\n                        {record.shiftName.replace(/\\\\[|\\\\]/g, '')}\\r\\n                      </td>\\r\\n                    </tr>\\r\\n                  {/each}\\r\\n                </tbody>\\r\\n              </table>\\r\\n            </div>\\r\\n          {/each}\\r\\n\\r\\n          {#if filteredData.length === 0 && !loading}\\r\\n            <div class=\\"text-center py-12\\">\\r\\n              <Clock class=\\"h-12 w-12 text-zinc-400 mx-auto mb-4\\" />\\r\\n              <p class=\\"text-zinc-500 text-lg\\">No attendance records found for the selected criteria.</p>\\r\\n              <p class=\\"text-zinc-400 text-sm mt-2\\">Try adjusting your filters or date range.</p>\\r\\n            </div>\\r\\n          {/if}\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Footer -->\\r\\n      <div class=\\"pb-6 text-center text-xs text-zinc-500\\">\\r\\n        © {new Date().getFullYear()} National Consulting India • Attendance Dashboard • Gold & Off‑White theme\\r\\n      </div>\\r\\n    </main>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n  .animate-spin {\\r\\n    animation: spin 1s linear infinite;\\r\\n  }\\r\\n  \\r\\n  @keyframes spin {\\r\\n    from {\\r\\n      transform: rotate(0deg);\\r\\n    }\\r\\n    to {\\r\\n      transform: rotate(360deg);\\r\\n    }\\r\\n  }\\r\\n</style>\\r\\n"],"names":[],"mappings":"AA4zBE,4BAAc,CACZ,SAAS,CAAE,mBAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAC5B,CAEA,WAAW,mBAAK,CACd,IAAK,CACH,SAAS,CAAE,OAAO,IAAI,CACxB,CACA,EAAG,CACD,SAAS,CAAE,OAAO,MAAM,CAC1B,CACF"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let groupedData;
  let departmentStats;
  let statistics;
  let attendanceData = [];
  let filteredData = [];
  let dateRange = {
    fromDate: "2025-08-01",
    toDate: "2025-08-31"
  };
  let filters = {
    employeeId: "",
    employeeName: "",
    department: "",
    designation: "",
    location: "",
    shift: "",
    earlyEntry: "",
    lateEntry: "",
    earlyExit: "",
    lateExit: "",
    minTotalHours: "",
    maxTotalHours: ""
  };
  function applyFilters() {
    let filtered = [...attendanceData];
    Object.keys(filters).forEach((key) => {
      const value = filters[key];
      if (!value) return;
      switch (key) {
        case "employeeId":
          filtered = filtered.filter((item) => item.employeeId.toLowerCase().includes(value.toLowerCase()));
          break;
        case "employeeName":
          filtered = filtered.filter((item) => item.employeeName.toLowerCase().includes(value.toLowerCase()));
          break;
        case "department":
          filtered = filtered.filter((item) => item.department.toLowerCase().includes(value.toLowerCase()));
          break;
        case "designation":
          filtered = filtered.filter((item) => item.designation.toLowerCase().includes(value.toLowerCase()));
          break;
        case "location":
          filtered = filtered.filter((item) => item.location.toLowerCase().includes(value.toLowerCase()));
          break;
        case "shift":
          filtered = filtered.filter((item) => item.shiftName.toLowerCase().includes(value.toLowerCase()));
          break;
        case "minTotalHours":
          filtered = filtered.filter((item) => item.totalHoursDecimal >= parseFloat(value));
          break;
        case "maxTotalHours":
          filtered = filtered.filter((item) => item.totalHoursDecimal <= parseFloat(value));
          break;
      }
    });
    filteredData = filtered;
  }
  $$result.css.add(css);
  {
    if (filters) {
      applyFilters();
    }
  }
  groupedData = (() => {
    const groups = {};
    filteredData.forEach((record) => {
      if (!groups[record.department]) {
        groups[record.department] = [];
      }
      groups[record.department].push(record);
    });
    return groups;
  })();
  departmentStats = (() => {
    const stats = {};
    Object.keys(groupedData).forEach((dept) => {
      const deptData = groupedData[dept];
      const present = deptData.filter((r) => r.status === "Present").length;
      const absent = deptData.filter((r) => r.status === "Absent").length;
      const avgHours = deptData.length > 0 ? (deptData.reduce((sum, r) => sum + r.totalHoursDecimal, 0) / deptData.length).toFixed(1) : 0;
      stats[dept] = {
        total: deptData.length,
        present,
        absent,
        avgHours
      };
    });
    return stats;
  })();
  statistics = (() => {
    const totalEmployees = new Set(filteredData.map((item) => item.employeeId)).size;
    const totalRecords = filteredData.length;
    const avgHours = filteredData.length > 0 ? (filteredData.reduce((sum, item) => sum + item.totalHoursDecimal, 0) / filteredData.length).toFixed(2) : 0;
    const earlyEntries = filteredData.filter((item) => item.earlyEntry && item.earlyEntry.startsWith("+")).length;
    const lateEntries = filteredData.filter((item) => item.lateEntry && item.lateEntry.startsWith("-")).length;
    const earlyExits = filteredData.filter((item) => item.earlyExit && item.earlyExit.startsWith("-")).length;
    const lateExits = filteredData.filter((item) => item.lateExit && item.lateExit.startsWith("+")).length;
    return {
      totalEmployees,
      totalRecords,
      avgHours,
      earlyEntries,
      lateEntries,
      earlyExits,
      lateExits
    };
  })();
  return `${$$result.head += `<!-- HEAD_svelte-l96qbs_START -->${$$result.title = `<title>Attendance Dashboard - National Consulting India</title>`, ""}<meta name="description" content="Track and analyze employee attendance patterns"><!-- HEAD_svelte-l96qbs_END -->`, ""} <div class="min-h-screen bg-gradient-to-br from-offwhite-50 via-gold-50 to-offwhite-100 text-zinc-800"> ${validate_component(Header, "Header").$$render($$result, {}, {}, {})}  <div class="mx-auto grid max-w-7xl grid-cols-1 gap-6 p-6 lg:grid-cols-12"> <aside class="lg:col-span-2">${validate_component(Sidebar, "Sidebar").$$render($$result, { currentPath: "/attendance" }, {}, {})}</aside>  <main class="lg:col-span-10 space-y-6"> <div class="card"><div class="card-header"><div class="flex items-center justify-between"><div class="flex items-center gap-3">${validate_component(Clock, "Clock").$$render($$result, { class: "h-6 w-6 text-gold-600" }, {}, {})} <div><h1 class="text-2xl font-bold text-zinc-900" data-svelte-h="svelte-1qb5vwr">Attendance</h1> <p class="text-sm text-zinc-600" data-svelte-h="svelte-yjxxy6">Employee attendance tracking and management</p></div></div> <div class="flex items-center gap-3"><button class="btn-secondary flex items-center gap-2">${validate_component(Download, "Download").$$render($$result, { class: "h-4 w-4" }, {}, {})}
                Export</button> <a href="/settings" class="btn-secondary flex items-center gap-2">${validate_component(Upload, "Upload").$$render($$result, { class: "h-4 w-4" }, {}, {})}
                Upload Data</a></div></div></div></div>  <div class="card"><div class="card-content"><div class="grid grid-cols-1 lg:grid-cols-4 gap-6"> <div><label class="block text-sm font-medium text-zinc-700 mb-2" data-svelte-h="svelte-171uccp">From Date</label> <input type="date" class="input w-full"${add_attribute("value", dateRange.fromDate, 0)}></div> <div><label class="block text-sm font-medium text-zinc-700 mb-2" data-svelte-h="svelte-qhogkc">To Date</label> <input type="date" class="input w-full"${add_attribute("value", dateRange.toDate, 0)}></div>  <div class="flex flex-col gap-2"><button ${""} class="btn-primary flex items-center gap-2 justify-center disabled:opacity-50">${`${validate_component(Search, "Search").$$render($$result, { class: "h-4 w-4" }, {}, {})}
                  Fetch Data`}</button> <button class="btn-secondary flex items-center gap-2 justify-center">${validate_component(Filter, "Filter").$$render($$result, { class: "h-4 w-4" }, {}, {})}
                Filters</button></div>  <div><label class="block text-sm font-medium text-zinc-700 mb-2" data-svelte-h="svelte-1nn5ser">Upload Excel</label> <input type="file" accept=".csv,.xlsx" class="input w-full"> ${``}</div></div>  ${``}</div></div>  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"><div class="card"><div class="card-content"><div class="flex items-center justify-between"><div><p class="text-sm font-medium text-zinc-600" data-svelte-h="svelte-1p1vqlw">Total Employees</p> <p class="text-3xl font-bold text-zinc-900">${escape(statistics.totalEmployees)}</p></div> ${validate_component(Users, "Users").$$render($$result, { class: "h-8 w-8 text-gold-500" }, {}, {})}</div></div></div> <div class="card"><div class="card-content"><div class="flex items-center justify-between"><div><p class="text-sm font-medium text-zinc-600" data-svelte-h="svelte-1myh2lb">Total Records</p> <p class="text-3xl font-bold text-zinc-900">${escape(statistics.totalRecords)}</p></div> ${validate_component(File_text, "FileText").$$render($$result, { class: "h-8 w-8 text-emerald-500" }, {}, {})}</div></div></div> <div class="card"><div class="card-content"><div class="flex items-center justify-between"><div><p class="text-sm font-medium text-zinc-600" data-svelte-h="svelte-9iowur">Average Hours</p> <p class="text-3xl font-bold text-zinc-900">${escape(statistics.avgHours)}</p></div> ${validate_component(Clock, "Clock").$$render($$result, { class: "h-8 w-8 text-blue-500" }, {}, {})}</div></div></div> <div class="card"><div class="card-content"><div class="flex items-center justify-between"><div><p class="text-sm font-medium text-zinc-600" data-svelte-h="svelte-6sr34n">Late Entries</p> <p class="text-3xl font-bold text-red-600">${escape(statistics.lateEntries)}</p></div> ${validate_component(Alert_circle, "AlertCircle").$$render($$result, { class: "h-8 w-8 text-red-500" }, {}, {})}</div></div></div></div>  ${``}  <div class="card overflow-hidden"><div class="card-header flex justify-between items-center"><h2 class="text-xl font-semibold text-zinc-900" data-svelte-h="svelte-5fih08">Today&#39;s Attendance Records</h2> <div class="text-sm text-zinc-600">Showing ${escape(filteredData.length)} of ${escape(attendanceData.length)} employees</div></div> <div class="card-content p-0">${each(Object.keys(groupedData), (department) => {
    return ` <div class="bg-gold-50/50 px-6 py-3 border-b border-gold-200/50"><div class="flex items-center justify-between"><h3 class="text-lg font-semibold text-zinc-900">${escape(department)}</h3> <div class="text-sm text-zinc-600">Total: <span class="font-medium">${escape(departmentStats[department].total)}</span>
                  Present: <span class="font-medium text-emerald-600">${escape(departmentStats[department].present)}</span> ${departmentStats[department].absent > 0 ? `Absent: <span class="font-medium text-red-600">${escape(departmentStats[department].absent)}</span>` : ``}
                  Avg Hours: <span class="font-medium">${escape(departmentStats[department].avgHours)}</span></div> </div></div>  <div class="overflow-x-auto"><table class="min-w-full"><thead class="bg-zinc-50"><tr><th class="px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider" data-svelte-h="svelte-jsom2j">Employee</th> <th class="px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider" data-svelte-h="svelte-jp76w5">Status</th> <th class="px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider" data-svelte-h="svelte-le96q4">First In</th> <th class="px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider" data-svelte-h="svelte-19o8f97">Last Out</th> <th class="px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider" data-svelte-h="svelte-adcf6">Total Hours</th> <th class="px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider" data-svelte-h="svelte-1fqdqvz">Late Entry</th> <th class="px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider" data-svelte-h="svelte-vpgyn8">Early Exit</th> <th class="px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider" data-svelte-h="svelte-yspzuv">Net Hours</th> <th class="px-6 py-3 text-left text-xs font-medium text-zinc-500 uppercase tracking-wider" data-svelte-h="svelte-dwt2gb">Shift</th> </tr></thead> <tbody class="bg-white divide-y divide-zinc-200">${each(groupedData[department], (record) => {
      return `<tr class="hover:bg-gold-50/30 transition-colors"><td class="px-6 py-4 whitespace-nowrap"><div class="flex items-center"><div class="h-8 w-8 rounded-full bg-gold-100 flex items-center justify-center text-sm font-medium text-gold-800 mr-3">${escape(record.employeeName.split(" ").map((n) => n[0]).join("").slice(0, 2))}</div> <div><div class="text-sm font-medium text-zinc-900">${escape(record.employeeName)}</div> <div class="text-sm text-zinc-500">${escape(record.employeeId)} • ${escape(record.designation)}</div></div> </div></td> <td class="px-6 py-4 whitespace-nowrap"><span class="${"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium " + escape(
        record.status === "Present" ? "bg-emerald-100 text-emerald-800" : "bg-red-100 text-red-800",
        true
      )}">${escape(record.status)} </span></td> <td class="px-6 py-4 whitespace-nowrap text-sm text-zinc-900">${escape(record.firstIn)}</td> <td class="px-6 py-4 whitespace-nowrap text-sm text-zinc-900">${escape(record.lastOut)}</td> <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-zinc-900">${escape(record.totalHours)}</td> <td class="px-6 py-4 whitespace-nowrap"><span class="${"text-sm " + escape(
        record.lateEntry.startsWith("-") ? "text-red-600 font-medium" : "text-zinc-500",
        true
      )}">${escape(record.lateEntry === "-" ? "On Time" : record.lateEntry)} </span></td> <td class="px-6 py-4 whitespace-nowrap"><span class="${"text-sm " + escape(
        record.earlyExit.startsWith("-") ? "text-red-600 font-medium" : "text-zinc-500",
        true
      )}">${escape(record.earlyExit === "-" ? "On Time" : record.earlyExit)} </span></td> <td class="px-6 py-4 whitespace-nowrap"><span class="${"text-sm font-medium " + escape(
        record.netHours.startsWith("+") ? "text-emerald-600" : record.netHours.startsWith("-") ? "text-red-600" : "text-zinc-500",
        true
      )}">${escape(record.netHours)} </span></td> <td class="px-6 py-4 whitespace-nowrap text-sm text-zinc-500">${escape(record.shiftName.replace(/\[|\]/g, ""))}</td> </tr>`;
    })} </tbody></table> </div>`;
  })} ${filteredData.length === 0 && true ? `<div class="text-center py-12">${validate_component(Clock, "Clock").$$render(
    $$result,
    {
      class: "h-12 w-12 text-zinc-400 mx-auto mb-4"
    },
    {},
    {}
  )} <p class="text-zinc-500 text-lg" data-svelte-h="svelte-1cpthde">No attendance records found for the selected criteria.</p> <p class="text-zinc-400 text-sm mt-2" data-svelte-h="svelte-1xbgvw2">Try adjusting your filters or date range.</p></div>` : ``}</div></div>  <div class="pb-6 text-center text-xs text-zinc-500">© ${escape((/* @__PURE__ */ new Date()).getFullYear())} National Consulting India • Attendance Dashboard • Gold &amp; Off‑White theme</div></main></div> </div>`;
});
export {
  Page as default
};
